'''Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс
Клетка.
В его конструкторе инициализировать параметр,соответствующий количеству ячеек клетки (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только
к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток,
соответственно.'''


class Cell():
    def __init__(self, num_cell):
        self.num_cell = num_cell

    # Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
    def __add__(self, other):
        return self.num_cell + other.num_cell

    # Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше
    # нуля, иначе выводить соответствующее сообщение.
    def __sub__(self, other):
        if self.num_cell > other.num_cell:
            return self.num_cell - other.num_cell
        else:
            return f"Вычитание не возможно"

    # Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих
    # двух клеток.
    def __mul__(self, other):
        return self.num_cell * other.num_cell

    # Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
    # ячеек этих двух клеток.
    def __truediv__(self, other):
        return self.num_cell % other.num_cell

    # В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
    # Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку вида *****\n*****\n*****...,
    # где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает,
    # то в последний ряд записываются все оставшиеся.
    # Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
    # Тогда метод make_order() вернёт строку: *****\n*****\n**.
    # Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
    # Тогда метод make_order() вернёт строку: *****\n*****\n*****.
    # Подсказка: подробный список операторов для перегрузки доступен по ссылке.'''

    def make_order(self, cell_in_row):
        rows = self.num_cell // cell_in_row
        last_row = self.num_cell % cell_in_row
        str1 = ''
        str2 = ''
        str3 = ''

        while cell_in_row > 0:
            str1 = str1 + '*'
            cell_in_row -= 1
        while rows > 0:
            str2 = str2 + str1 + '\n'
            rows -= 1
        while last_row > 0:
            str3 = str3 + '*'
            last_row -= 1

        str2 = str2 + str3
        return str2


my_cell1 = Cell(5)
my_cell2 = Cell(6)
my_cell3 = Cell(4)

print(my_cell1 + my_cell2)
print(my_cell1 - my_cell2)
print(my_cell1 - my_cell3)
print(my_cell1 * my_cell2)
print(my_cell1 / my_cell2)

my_cell4 = Cell(10)
print(f"Матрица клетки my_cell4: \n{my_cell4.make_order(3)}")
